#!/bin/bash
#inkVerbRunner! verb.ink

# This waits until a VPS answers or rejects ssh calls (in case it is busy, off, or reloading sshd)
## This script will loop until finished, whether ssh keys are either accepted or rejected, so long as the server is up and responsive

# How to use:
## ./waitvpsanswer [verb-namespace] [tld] [poweronce - optional to only run power cycle once]

# Eg:
## ./waitvpsanswer name ink
## ./waitvpsanswer name ink poweronce


if [ -z "$2" ]; then
  /usr/bin/echo "Needs namespace & TLDarguments, I quit."
  exit 0
fi

namespace="$1"
VerbTLD="$2"

if [ -n "$3" ] && [ "$3" = "poweronce" ]; then
  poweronce="true"
fi

if [ ! -f "/opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb" ]; then
  /usr/bin/echo "${namespace}.${VerbTLD} does not exist! I quit."
  exit 0
fi

# Configs
. "/opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb"
. /opt/rink/sshkey

# IP check functions
## IP4
### Thanks http://www.linuxjournal.com/content/validating-ip-address-bash-script
isIP4() {
local ip4="$1"
local vvar="$2"
local validregex="^([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})"
if [[ "${ip4}" =~ ${validregex} ]]; then
isIP4="true"; else
isIP4="false"; fi
}
## IP6
### Expanded or compressed IPv6 formats both work
isIP6() {
local ip6="$1"
local vvar="$2"
local validregex="(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))"
if [[ "${ip6}" =~ ${validregex} ]]; then
isIP6="true"; else
isIP6="false"; fi
}

# Wait for powerup on IPv4
## Prep loop
IPv4="$(/usr/bin/vultr-cli instance ipv4 list ${VultrInstanceID} | /usr/bin/grep main_ip | /usr/bin/sed 's/\s.*$//')"
isIP4 ${IPv4}
if [ "${isIP4}" = "true" ]; then
  sshCall="root@${IPv4} -p ${VerbPort} -i /root/.ssh/${SSHKey}"
  echo "1: /usr/bin/ssh -o StrictHostKeyChecking=yes -o ConnectTimeout=4 ${sshCall} "exit 0" 1> /opt/rink/tmp/waiton.${namespace}.${VerbTLD} 2> /opt/rink/tmp/waiton.${namespace}.${VerbTLD}"
  /usr/bin/ssh -o StrictHostKeyChecking=yes -o ConnectTimeout=4 ${sshCall} "exit 0" 1> /opt/rink/tmp/waiton.${namespace}.${VerbTLD} 2> /opt/rink/tmp/waiton.${namespace}.${VerbTLD}
  sshexit="$?"
  echo $sshexit
  cat /opt/rink/tmp/waiton.${namespace}.${VerbTLD}
  /usr/bin/grep -q 'key' /opt/rink/tmp/waiton.${namespace}.${VerbTLD}
  greptest="$?"
  echo $greptest
  count=0
  # Loop
  while [ "${greptest}" != "0" ] && [ "${sshexit}" != "0" ]; do
    sleep 2
    echo "2: /usr/bin/ssh -o StrictHostKeyChecking=yes -o ConnectTimeout=3 ${sshCall} "exit 0" 1> /opt/rink/tmp/waiton.${namespace}.${VerbTLD} 2> /opt/rink/tmp/waiton.${namespace}.${VerbTLD}"
    /usr/bin/ssh -o StrictHostKeyChecking=yes -o ConnectTimeout=3 ${sshCall} "exit 0" 1> /opt/rink/tmp/waiton.${namespace}.${VerbTLD} 2> /opt/rink/tmp/waiton.${namespace}.${VerbTLD}
    sshexit="$?"
    echo $sshexit
    cat /opt/rink/tmp/waiton.${namespace}.${VerbTLD}
    /usr/bin/grep -q 'key' /opt/rink/tmp/waiton.${namespace}.${VerbTLD}
    greptest="$?"
    echo $greptest
    ### If a fast test, fail after a short time
    if [ -n "${poweronce}" ] && [ "${poweronce}" = "true" ]; then
        if [ "$count" -gt "7" ]; then
          fail="true"
          break
        elif [ "$count" -gt "5" ]; then
          /opt/rink/run/powercycle ${namespace} ${VerbTLD}
          sleep 15
        fi
    ### If we have been trying 10 minutes, restart
    else
      if [ "$count" -gt "60" ]; then
        /opt/rink/run/powercycle ${namespace} ${VerbTLD}
        count=0
      fi
    fi
    ((count++))
  done
  ## Cleanup
  /usr/bin/rm -f /opt/rink/tmp/waiton.${namespace}.${VerbTLD}
fi

# Wait for powerup on IPv4
## Keep checking the IPv6 (because it keeps changing in spinup)
IPv6="$(/usr/bin/vultr-cli instance ipv6 list ${VultrInstanceID} | /usr/bin/grep main_ip | /usr/bin/sed 's/\s.*$//')"
isIP6 ${IPv6}
if [ "${isIP6}" = "true" ]; then
  ## Prep loop
  sshCall="root@${IPv6} -p ${VerbPort} -i /root/.ssh/${SSHKey}"
  echo "3: /usr/bin/ssh -o StrictHostKeyChecking=yes -o ConnectTimeout=4 ${sshCall} "exit 0" 1> /opt/rink/tmp/waiton.${namespace}.${VerbTLD} 2> /opt/rink/tmp/waiton.${namespace}.${VerbTLD}"
  /usr/bin/ssh -o StrictHostKeyChecking=yes -o ConnectTimeout=4 ${sshCall} "exit 0" 1> /opt/rink/tmp/waiton.${namespace}.${VerbTLD} 2> /opt/rink/tmp/waiton.${namespace}.${VerbTLD}
  sshexit="$?"
  echo $sshexit
  cat /opt/rink/tmp/waiton.${namespace}.${VerbTLD}
  /usr/bin/grep -q 'key' /opt/rink/tmp/waiton.${namespace}.${VerbTLD}
  greptest="$?"
  echo $greptest
  count=0
  # Loop
  while [ "${greptest}" != "0" ] && [ "${sshexit}" != "0" ]; do
    sleep 2
    echo "4: /usr/bin/ssh -o StrictHostKeyChecking=yes -o ConnectTimeout=3 ${sshCall} "exit 0" 1> /opt/rink/tmp/waiton.${namespace}.${VerbTLD} 2> /opt/rink/tmp/waiton.${namespace}.${VerbTLD}"
    /usr/bin/ssh -o StrictHostKeyChecking=yes -o ConnectTimeout=3 ${sshCall} "exit 0" 1> /opt/rink/tmp/waiton.${namespace}.${VerbTLD} 2> /opt/rink/tmp/waiton.${namespace}.${VerbTLD}
    sshexit="$?"
    echo $sshexit
    cat /opt/rink/tmp/waiton.${namespace}.${VerbTLD}
    /usr/bin/grep -q 'key' /opt/rink/tmp/waiton.${namespace}.${VerbTLD}
    greptest="$?"
    echo $greptest
    ### Keep checking the IPv6 (because it keeps changing in spinup)
    IPv6="$(/usr/bin/vultr-cli instance ipv6 list ${VultrInstanceID} | /usr/bin/grep main_ip | /usr/bin/sed 's/\s.*$//')"
    sshCall="root@${IPv6} -p ${VerbPort} -i /root/.ssh/${SSHKey}"
        ### If a fast test, fail after a short time
    if [ -n "${poweronce}" ] && [ "${poweronce}" = "true" ]; then
        if [ "$count" -gt "7" ]; then
          fail="true"
          break
        elif [ "$count" -gt "5" ]; then
          /opt/rink/run/powercycle ${namespace} ${VerbTLD}
          sleep 15
        fi
    ### If we have been trying 10 minutes, restart
    else
      if [ "$count" -gt "60" ]; then
        /opt/rink/run/powercycle ${namespace} ${VerbTLD}
        count=0
      fi
    fi
    ((count++))
  done
  ## Cleanup
  /usr/bin/rm -f /opt/rink/tmp/waiton.${namespace}.${VerbTLD}
fi

# Poweronce test?
if [ -n "${poweronce}" ] && [ "${poweronce}" = "true" ] && [ "${fail}" = "true" ]; then
  /usr/bin/echo "Verber is NR."
  exit 6
fi
