#!/bin/bash
#inkVerbRunner! verb.ink

# This creates a new Vultr VPS, sending the output to a config file that can be read, creating other configs based on output
## Tertiary Warning: This is run by other scripts and should not be run by itself
## Used by: addvps and setuprinkns
##DEV the noip4 argument is in development and not yet supported by vultr-cli

# How to use:
## ./newvps [verb-namespace] [tld] [user] [vultr-plan (1gb shortcut for lowest, 2gb shortcut for second-lowest: vc2-1c-2gb)] [snapshot-nickname] [vultr-region] [PHP-timezone - optional; "-" placeholder] [ 'noip4' turn-off IPv4 - optional DEV]

# Eg:
## ./newvps name ink john 1gb laemp
## ./newvps name ink john 2gb laemp sjc
## ./newvps nick red bill vc2-1c-2gb laemp sea America/Los_Angeles
## ./newvps nick red bill vc2-1c-2gb laemp sea America/Los_Angeles customhostname
## ./newvps nick red bill vc2-1c-2gb laemp sea America/Los_Angeles - noip4
## ./newvps nick red bill vc2-1c-2gb laemp sea America/Los_Angeles customhostname noip4


if [ -z "$5" ]; then
  /usr/bin/echo "Needs namespace, TLD, user plan, region, & snapshot arguments, I quit."
  exit 0
fi

# Defaults
. /opt/rink/rinknames

namespace="$1"
VerbTLD="$2"
vuser="$3"
vultrplan="$4"
snapnick="$5"

# Override defaults
if [ -n "$6" ] && /usr/bin/vultr-cli regions list | /usr/bin/grep -q "^$6"; then
  VultrRegion="$6" # Overrides region from rinknames
fi
if [ -n "$7" ] && /usr/bin/grep -q "^$7" /opt/verb/ink/PHPcities; then
  TimeZone="$7" # Overrides timezone from rinknames
fi

# Host specified?
if [ -n "$8" ] &&  [ "$8" != "-" ]; then
  hostid="$8"
## Get the latest Verb ID number
elif [ -f "/opt/rink/lastverbid" ]; then
  . /opt/rink/lastverbid
  hostid=$(( LastID + 1 ))
else
  hostid="1"
fi

# IP
if [ -z "$9" ]; then
  ip46statement="--ipv6 true"
elif [ "$9" = "noip4" ]; then
  ip46statement="--ipv6 true --ipv4 false"
fi

# Check to see if this verber already exists by this name
if [ -f /opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb ]; then
  /usr/bin/echo "Verber with name '${VerbTLD}' and TLD '${namespace}' already exists."
  exit 5
elif [ "${VerbTLD}" != "${RinkVerbTLD}" ] && [ ! -f "/opt/rink/conf/verbers/${namespace}.${RinkVerbTLD}.vrb" ]; then
  /usr/bin/echo "Verber with '${RinkVerbTLD}' TLD must be created for '${namespace}' before creating non-'${RinkVerbTLD}' TLD verbers."
  exit 5
elif [ "${VerbTLD}" != "${RinkVerbTLD}" ] && [ -f "/opt/rink/conf/verbers/${namespace}.${RinkVerbTLD}.vrb" ]; then
  . /opt/rink/conf/verbers/${namespace}.${RinkVerbTLD}.vrb
  . /opt/rink/ns/${VerbNameServersConfig}
  if [ "${VerbUser}" != "${vuser}" ]; then
    /usr/bin/echo "Verb name '${namespace}' is already owned by another user."
    exit 5
  fi
fi

## Make sure it is not in use
### /usr/bin/grep "-s, --no-messages suppress error messages"
while /usr/bin/grep -qs ^VerbHostID=\"${hostid}\" /opt/rink/conf/verbers/*.vrb > /dev/null; do
  hostid=$(( hostid + 1 ))
done

# Spin up the VPS
if [ -f "/opt/rink/snapshotid/${snapnick}" ]; then
  . /opt/rink/snapshotid/${snapnick}
  if ! /usr/bin/vultr-cli snapshot list | /usr/bin/grep -q "^${SnapshotID}"; then
    /usr/bin/echo "Listed snapshot does not exist. I quit."
    exit 5
  fi
else
  /usr/bin/echo "Snapshot not listed. I quit."
  exit 5
fi

if [ "${vultrplan}" = "1gb" ]; then
  vultrplan="vc2-1c-1gb"
elif [ "${vultrplan}" = "2gb" ]; then
  vultrplan="vc2-1c-2gb"
fi

# Get $Port
. /opt/rink/portnum

# Create the instance
#DEV at a later date, I will complete this thought, but I don't know what I was going to do initially. If you are the intern who found this line, you win. Inform your supervisor to inform Jesse ASAP!
/usr/bin/vultr-cli instance create --region "${VultrRegion}" --plan "${vultrplan}" --snapshot "${SnapshotID}" --label "${namespace}.${VerbTLD}" ${ip46statement} > /opt/rink/conf/verbers/${namespace}.${VerbTLD}.raw

# Exit status?
e="$?"; if [ "$e" != "0" ]; then
  /usr/bin/echo "VPS creation failed"
  exit "$e"
fi

# Did it work?
if [ -f "/opt/rink/conf/verbers/${namespace}.${VerbTLD}.raw" ]; then
  if ! /usr/bin/grep -q ^ID /opt/rink/conf/verbers/${namespace}.${VerbTLD}.raw; then
    /usr/bin/echo "VPS output file is not correct, start over."
    /usr/bin/rm -f "/opt/rink/conf/verbers/${namespace}.${VerbTLD}.*"
    /usr/bin/sed -i "/${namespace}.${VerbTLD}.ssh/d" /root/.ssh/config
    exit 4
  fi
else
  /usr/bin/echo "VPS output file does not exist, start over."
  /usr/bin/rm -f "/opt/rink/conf/verbers/${namespace}.${VerbTLD}.*"
  /usr/bin/sed -i "/${namespace}.${VerbTLD}.ssh/d" /root/.ssh/config
  exit 4
fi

# Get the VPS instance ID
VultrInstanceID="$(/usr/bin/cat /opt/rink/conf/verbers/${namespace}.${VerbTLD}.raw | /usr/bin/grep ^ID | /usr/bin/sed s"/ID\t\t\t//")"
datestamp="$(/usr/bin/date +%Y-%m-%d_%T)"
/usr/bin/cat <<EOF > /opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb
VultrInstanceID="${VultrInstanceID}"
VultrPlan="${vultrplan}"
DateCreated="${datestamp}"
VerbHostID="${hostid}"
VerbName="${namespace}"
VerbTLD="${VerbTLD}"
VerbRegion="${VultrRegion}"
VerbUser="${vuser}"
VerbPort="${Port}"
VerbNameServersConfig="${NameServersConfig}"
EOF

# IP address
/usr/bin/echo "New VPS instance ${namespace}.${VerbTLD} initiated. Waiting a few seconds for details to populate..."
/usr/bin/sleep 5

# Make sure that the IPv4 is not 0.0.0.0; wait until this is done right
faillimit=0
IPv4nozero="$(/usr/bin/vultr-cli instance ipv4 list ${VultrInstanceID} 2> /dev/null | /usr/bin/grep main_ip | /usr/bin/sed 's/\s.*$//' 2> /dev/null)"
while [ "${IPv4nozero}" = "0.0.0.0" ] || [ "${IPv4nozero}" = "" ]; do
  IPv4nozero="$(/usr/bin/vultr-cli instance ipv4 list ${VultrInstanceID} 2> /dev/null | /usr/bin/grep main_ip | /usr/bin/sed 's/\s.*$//' 2> /dev/null)"
  /usr/bin/sleep 1
  ### Fail proof
  if [ "$faillimit" -gt "405" ]; then
    /opt/rink/run/purgevps ${namespace} ${VerbTLD} ${vuser}
    e="$?"; [[ "$e" = "0" ]] || exit "$e"
    /usr/bin/echo "Awe, snap! Could not create ${namespace}.${VerbTLD} properly, likely due to brief backend down time. Try again now or within a few minutes."
    exit 4
  fi
  ((faillimit++))
done

# Make sure IPv6 is valid
#IPv6nozero="$(/usr/bin/vultr-cli instance ipv6 list ${VultrInstanceID} 2> /dev/null | /usr/bin/grep main_ip | /usr/bin/sed 's/\s.*$//')"
# SOME CODE HERE

# Wait for IPv4 to populate (Default until set: 0.0.0.0)
# firstIPv4PLACEHOLDER="$(/usr/bin/vultr-cli instance ipv4 list ${VultrInstanceID} | /usr/bin/grep main_ip | /usr/bin/sed 's/\s.*$//')"
# faillimit=0
# IPv4="$(/usr/bin/vultr-cli instance ipv4 list ${VultrInstanceID} | /usr/bin/grep main_ip | /usr/bin/sed 's/\s.*$//' 2> /dev/null)"
# while [ "${IPv4}" = "0.0.0.0" ] || [ "${IPv4}" = "$firstIPv4PLACEHOLDER" ]; do
#   IPv4="$(/usr/bin/vultr-cli instance ipv4 list ${VultrInstanceID} | /usr/bin/grep main_ip | /usr/bin/sed 's/\s.*$//' 2> /dev/null)"
#   /usr/bin/sleep 1
#   ### Fail proof
#   if [ "$faillimit" -gt "405" ]; then
#     /opt/rink/run/purgevps ${namespace} ${VerbTLD} ${vuser}
#     e="$?"; [[ "$e" = "0" ]] || exit "$e"
#     /usr/bin/echo "Awe, snap! Could not create ${namespace}.${VerbTLD} properly, likely due to brief backend down time. Try again now or within a few minutes."
#     exit 4
#   fi
#   ((faillimit++))
# done
# Above could change depending on the spinup workflow and whether IPv4 is still available

## Check the IPv6 (Default until set is empty; a temp IPv6 is set when the final IPv4 is set, found with ${firstIPv6PLACEHOLDER} and ${secondIPv6PLACEHOLDER})
# firstIPv6PLACEHOLDER="$(/usr/bin/vultr-cli instance ipv6 list ${VultrInstanceID} | /usr/bin/grep main_ip | /usr/bin/sed 's/\s.*$//')"
# secondIPv6PLACEHOLDER="$(/usr/bin/vultr-cli instance ipv6 list ${VultrInstanceID} | /usr/bin/grep main_ip | /usr/bin/sed 's/\s.*$//')"
# IPv6third="$(/usr/bin/vultr-cli instance ipv6 list ${VultrInstanceID} | /usr/bin/grep main_ip | /usr/bin/sed 's/\s.*$//')"
# counter=1
# while [ "${IPv6third}" = "${firstIPv6PLACEHOLDER}" ] || [ "${IPv6third}" = "${secondIPv6PLACEHOLDER}" ] && [ "${counter}" -lt "15" ]; do
#   IPv6third="$(/usr/bin/vultr-cli instance ipv6 list ${VultrInstanceID} | /usr/bin/grep main_ip | /usr/bin/sed 's/\s.*$//')"
#   /usr/bin/sleep 1
#   counter=$[${counter} +1]
# done
#DEV above won't matter anyway, IPv6 can't be found until the server is actually on waitvpson and then waitvpsanswer is the best determiner of a final IPv6

# /usr/bin/echo "IPv4: ${IPv4}" #DEV do this after we check the connection for answer
# /usr/bin/echo "IPv6: ${IPv6}" #DEV This could change, let's wait until after we process it


## IP processing
### Compress IPv6
hex2dec(){
    [ "$1" != "" ] && printf "%d" "$(( 0x$1 ))"
}
compress_ipv6() {
    ip=$1

    blocks=$(/bin/echo $ip | /bin/grep -o "[0-9a-f]\+")
    set $blocks

    # compress leading zeros
    ip=$(printf "%x:%x:%x:%x:%x:%x:%x:%x\n" \
        $(hex2dec $1) \
        $(hex2dec $2) \
        $(hex2dec $3) \
        $(hex2dec $4) \
        $(hex2dec $5) \
        $(hex2dec $6) \
        $(hex2dec $7) \
        $(hex2dec $8)
    )

    # prepend : for easier matching
    ip=:$ip

    # :: must compress the longest chain
    for pattern in :0:0:0:0:0:0:0:0 \
            :0:0:0:0:0:0:0 \
            :0:0:0:0:0:0 \
            :0:0:0:0:0 \
            :0:0:0:0 \
            :0:0; do
        if /bin/echo $ip | /bin/grep -qs $pattern; then
            ip=$(/bin/echo $ip | sed "s/$pattern/::/")
            # if the substitution occured before the end, we have :::
            ip=$(/bin/echo $ip | sed 's/:::/::/')
            break # only one substitution
        fi
    done

    # remove prepending : if necessary
    /bin/echo $ip | /bin/grep -qs "^:[^:]" && ip=$(echo $ip | sed 's/://')

    /bin/echo $ip
}
### Expand IPv6
expand_ipv6() {
    ip=$1

    # prepend 0 if we start with :
    /bin/echo $ip | /bin/grep -qs "^:" && ip="0${ip}"

    # expand ::
    if /bin/echo $ip | /bin/grep -qs "::"; then
        colons=$(/bin/echo $ip | sed 's/[^:]//g')
        missing=$(/bin/echo ":::::::::" | sed "s/$colons//")
        expanded=$(/bin/echo $missing | sed 's/:/:0/g')
        ip=$(/bin/echo $ip | sed "s/::/$expanded/")
    fi

    blocks=$(/bin/echo $ip | /bin/grep -o "[0-9a-f]\+")
    set $blocks

    printf "%04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x\n" \
        $(hex2dec $1) \
        $(hex2dec $2) \
        $(hex2dec $3) \
        $(hex2dec $4) \
        $(hex2dec $5) \
        $(hex2dec $6) \
        $(hex2dec $7) \
        $(hex2dec $8)
}
### Reverse IPv6
rarpa_ipv6() {
  local idx s=${1//:}
  for (( idx=${#s} - 1; idx>=0; idx-- )); do
    printf '%s.' "${s:$idx:1}"
  done
  printf 'ip6.arpa\n'
}

# # Create the .ssh/config entry
# . /opt/rink/sshkey
# /usr/bin/echo "Include /opt/rink/conf/verbers/${namespace}.${VerbTLD}.ssh" >> /root/.ssh/config
# /usr/bin/cat <<EOF > /opt/rink/conf/verbers/${namespace}.${VerbTLD}.ssh
# Host ${namespace}.${VerbTLD}
# Hostname ${IPv4}
# User root
# Port ${Port}
# IdentityFile /root/.ssh/${SSHKey}
# EOF

# Wait for powerup
/usr/bin/echo "Waiting for preparation and power up..."
/opt/rink/run/waitvpson ${namespace} ${VerbTLD}
#/opt/rink/run/waitvpsanswer ${namespace} ${VerbTLD} #DEV too much, the server may not be ready for such heavy interaction yet
e="$?"
if [ "$e" != "0" ]; then
  /usr/bin/echo "VPS cannot be accessed. It is possible that the keys are not installed. Make sure that they key '${SSHKey}' is properly installed on this VPS, then try again."
  /usr/bin/rm -f /opt/rink/conf/verbers/${namespace}.${VerbTLD}.*
  exit "$e"
fi
# Process IPs to list for keyscan

## Finalize the IP addresses (because they keep changing in spinup)
echo "vultr-cli instance ipv4 list ${VultrInstanceID}" #DEV
IPv4="$(/usr/bin/vultr-cli instance ipv4 list ${VultrInstanceID} 2> /dev/null | /usr/bin/grep main_ip | /usr/bin/sed 's/\s.*$//')"
echo $IPv4 #DEV
echo "vultr-cli instance ipv6 list ${VultrInstanceID}" #DEV
IPv6Raw=$(/usr/bin/vultr-cli instance ipv6 list ${VultrInstanceID} 2> /dev/null | /usr/bin/grep main_ip | /usr/bin/sed 's/\s.*$//')
echo "IPv6: $IPv6Raw" #DEV
IPv6Cmp=$(compress_ipv6 ${IPv6Raw})
echo $IPv6Cmp #DEV
IPv6Exp=$(expand_ipv6 ${IPv6Raw})
echo $IPv6Exp #DEV
IPv4ARPA=$(/usr/bin/echo ${IPv4} | /usr/bin/sed -r 's/^([0-9]{1,3}).([0-9]{1,3}).([0-9]{1,3}).([0-9]{1,3})$/\4.\3.\2.\1.in-addr.arpa/')
echo $IPv4ARPA #DEV
IPv6ARPA=$(rarpa_ipv6 ${IPv6Exp})
echo $IPv6ARPA #DEV
exit #DEV

## Remove the local server fingerfprint
### We have been approving into a new VPS with a stock host RSA key (on the snapshot); it needs to be removed from our local known_hosts check
/usr/bin/sed -i "/${IPv4}/d" /root/.ssh/known_hosts
/usr/bin/sed -i "/${IPv6Cmp}/d" /root/.ssh/known_hosts
/usr/bin/sed -i "/${IPv6Exp}/d" /root/.ssh/known_hosts

## Append IP addresses to config
/usr/bin/cat <<EOF >> /opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb
VerbIPv4="${IPv4}"
VerbIPv6="${IPv6Cmp}"
VerbIPv6Exp="${IPv6Exp}"
VerbARPAIPv4="${IPv4ARPA}"
VerbARPAIPv6="${IPv6ARPA}"
EOF

## Rebuild the ssh config to include both IPv4 and IPv6
. /opt/rink/sshkey
### Delete any pre-existing entry (shouldn't be needed, but to avoid redundancy)
/usr/bin/sed -i "/${namespace}.${VerbTLD}.ssh/d" /root/.ssh/config
### Add and create the new entry
/usr/bin/echo "Include /opt/rink/conf/verbers/${namespace}.${VerbTLD}.ssh" >> /root/.ssh/config
/usr/bin/cat <<EOF > /opt/rink/conf/verbers/${namespace}.${VerbTLD}.ssh
Host ${namespace}.${VerbTLD}
Hostname ${IPv4}
Hostname ${IPv6Cmp}
User root
Port ${Port}
IdentityFile /root/.ssh/${SSHKey}
EOF

# Now IPv6 is ready and IPv4 is also tested
/usr/bin/echo "IPv4: ${IPv4}"
/usr/bin/echo "IPv6: ${IPv6Cmp}" 

/usr/bin/echo "VPS is live, now setting up for use..."

# Refresh the SSHD keys on the server (they are still original from the snapshot and will seem like a duplicate in /root/.ssh/known_hosts)
## Do this in a loop
/usr/bin/ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -q -T ${namespace}.${VerbTLD} <<EOS
/usr/bin/rm /etc/ssh/ssh_host_*
e="\$?"; [[ "\$e" = "0" ]] || exit 4
/usr/bin/ssh-keygen -A
e="\$?"; [[ "\$e" = "0" ]] || exit 4
/usr/bin/reboot
EOS
sshresetstatus="$?"
count=0
faillimit=0
while [ "$sshresetstatus" != "0" ] && [ "$sshresetstatus" != "255" ]; do
  #/usr/bin/echo "newvps ssh-keygen loop reboot error: $sshresetstatus #DEBUG This echos a 255 while the server is still being prepared, use this for debugging only
  /usr/bin/echo "Waiting, then trying again..."
  sleep 3
  /usr/bin/ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -q -T ${namespace}.${VerbTLD} <<EOS
/usr/bin/rm -f /etc/ssh/ssh_host_*
e="\$?"; [[ "\$e" = "0" ]] || exit 4
/usr/bin/ssh-keygen -A
e="\$?"; [[ "\$e" = "0" ]] || exit 4
/usr/bin/reboot
EOS
  sshresetstatus="$?"
  ### If we have been trying 10 minutes, restart
  if [ "$count" -gt "200" ]; then
    /opt/rink/run/powercycle ${namespace} ${VerbTLD}
    count=0
  fi
  ((count++))
  ### Fail proof
  if [ "$faillimit" -gt "405" ]; then
    /opt/rink/run/purgevps ${namespace} ${VerbTLD} ${vuser}
    e="$?"; [[ "$e" = "0" ]] || exit "$e"
    /usr/bin/echo "Awe, snap! Could not create ${namespace}.${VerbTLD} properly, likely due to brief backend down time. Try again now or within a few minutes."
    exit 4
  fi
  ((faillimit++))
done

# Add the hashed key
sleep 10 # The server needs to start its reboot
/opt/rink/run/waitvpson ${namespace} ${VerbTLD}
#/opt/rink/run/waitvpsanswer ${namespace} ${VerbTLD}

# Ensure that make-verber is done and setup is ready
/usr/bin/ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 -q -T ${namespace}.${VerbTLD} <<EOS
if [ ! -f "/opt/verb/inst/make-verber-laemp" ] && [ -f "/opt/verb/inst/setup" ]; then
  /usr/bin/echo "Linux web stack is ready..."
  exit 0
else
  /usr/bin/echo "No Linux web stack! Can't continue."
  exit 8
fi
EOS
e="$?"; [[ "$e" = "0" ]] || exit "$e"

# Keyscan
/opt/rink/run/keyscan ${namespace} ${VerbTLD}
e="$?"; [[ "$e" = "0" ]] || exit "$e"

# Last ID (Only when we got this far)
if [ -z "$8" ]; then
  /usr/bin/echo "LastID=\"$hostid\"" > /opt/rink/lastverbid
fi

# Finish
/usr/bin/echo "${namespace}.${VerbTLD} created. Wait a few minutes before accessing."
