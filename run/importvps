#!/bin/bash
#inkVerbRunner! verb.ink

# This imports an existing VPS verber instance, creating all normal config files as any instance created with newvps
## Prerequesite: the SSH public key at /root/.ssh/Vultr_Rink_Key.pub from the "rink" verber must be installed in /root/.ssh/authorized_keys on this server for it to work
## Prerequesite: this file must exist on the verber to be imported: /opt/verb/conf/.importme

# How to use:
## ./importvps [verb-namespace] [tld] [user] [vultr-instance-ID]

# Eg:
## ./importvps name ink john s0mElong-An6Cr7z3-ID
## ./importvps name ink john s0mElong-An6Cr7z3-ID
## ./importvps nick red bill s0mElong-An6Cr7z3-ID


if [ -z "$4" ]; then
  /usr/bin/echo "Needs namespace, TLD, user & VPS-ID arguments, I quit."
  exit 5
fi

# Defaults
. /opt/rink/rinknames

namespace="$1"
VerbTLD="$2"
vuser="$3"
VultrInstanceID="$4"
if [ -z "$5" ]; then
  . /opt/rink/portnum
else
  Port="$5"
fi


# Check to see if this verber already exists by this name
if [ -f /opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb ]; then
  /usr/bin/echo "Verber with name '${VerbTLD}' and TLD '${namespace}' already exists."
  exit 5
elif [ "${VerbTLD}" != "${RinkVerbTLD}" ] && [ ! -f "/opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb" ]; then
  /usr/bin/echo "Verber with '${RinkVerbTLD}' TLD must be created for '${namespace}' before creating non-'${RinkVerbTLD}' TLD verbers."
  exit 5
elif [ "${VerbTLD}" != "${RinkVerbTLD}" ] && [ -f "/opt/rink/conf/verbers/${namespace}.${RinkVerbTLD}.vrb" ]; then
  . /opt/rink/conf/verbers/${namespace}.${RinkVerbTLD}.vrb
  . /opt/rink/ns/${VerbNameServersConfig}
  if [ "${VerbUser}" != "${vuser}" ]; then
    /usr/bin/echo "Verb name '${namespace}' is already owned by another user."
    exit 5
  fi
fi

#NOTE We don't get the last Verb ID because we use the host already on the imported verber
# Get the latest Verb ID number
# if [ -f "/opt/rink/lastverbid" ]; then
#   . /opt/rink/lastverbid
#   HostID=$(( LASTID + 1 ))
# else
#   HostID="1"
# fi
# ## Make sure it is not in use
# ### grep "-s, --no-messages suppress error messages"
# while /usr/bin/grep -qs ^VerbHostID=\"$HostID\" /opt/rink/conf/verbers/*.vrb > /dev/null; do
#   HostID=$(( HostID + 1 ))
# done

# Check if the VPS ID even exists
if ! /usr/bin/vultr-cli instance list | /usr/bin/grep -q "^${VultrInstanceID}"; then
  /usr/bin/echo "Listed snapshot does not exist. I quit."
  exit 5
fi

# Create the instance
/usr/bin/vultr-cli instance get "${VultrInstanceID}" > /opt/rink/conf/verbers/${namespace}.${VerbTLD}.raw

# Exit status?
e="$?"; if [ "$e" != "0" ]; then
  /usr/bin/echo "VPS lookup failed"
  exit "$e"
fi

# Did it work?
if [ -f /opt/rink/conf/verbers/${namespace}.${VerbTLD}.raw ]; then
  if ! /usr/bin/grep -q ^ID /opt/rink/conf/verbers/${namespace}.${VerbTLD}.raw; then
    /usr/bin/echo "VPS output file is not correct, start over."
    /usr/bin/rm -f "${namespace}.${VerbTLD}.*"
    exit 4
  fi
else
  /usr/bin/echo "VPS output file does not exist, start over."
  /usr/bin/rm -f "${namespace}.${VerbTLD}.*"
  exit 4
fi

# Get region and IP info
VultrRegion="$(/usr/bin/vultr-cli instance get "${VultrInstanceID}" | /usr/bin/grep REGION | /usr/bin/sed -r 's/REGION\s+//')"
IPv4="$(/usr/bin/vultr-cli instance ipv4 list $VultrInstanceID | /usr/bin/grep main_ip | /usr/bin/sed 's/\s.*$//')"
IPv6="$(/usr/bin/vultr-cli instance ipv6 list $VultrInstanceID | /usr/bin/grep main_ip | /usr/bin/sed 's/\s.*$//')"

## IP processing
### Compress IPv6
hex2dec(){
    [ "$1" != "" ] && printf "%d" "$(( 0x$1 ))"
}
compress_ipv6() {
    ip=$1

    blocks=$(/bin/echo $ip | /bin/grep -o "[0-9a-f]\+")
    set $blocks

    # compress leading zeros
    ip=$(printf "%x:%x:%x:%x:%x:%x:%x:%x\n" \
        $(hex2dec $1) \
        $(hex2dec $2) \
        $(hex2dec $3) \
        $(hex2dec $4) \
        $(hex2dec $5) \
        $(hex2dec $6) \
        $(hex2dec $7) \
        $(hex2dec $8)
    )

    # prepend : for easier matching
    ip=:$ip

    # :: must compress the longest chain
    for pattern in :0:0:0:0:0:0:0:0 \
            :0:0:0:0:0:0:0 \
            :0:0:0:0:0:0 \
            :0:0:0:0:0 \
            :0:0:0:0 \
            :0:0; do
        if /bin/echo $ip | /bin/grep -qs $pattern; then
            ip=$(/bin/echo $ip | sed "s/$pattern/::/")
            # if the substitution occured before the end, we have :::
            ip=$(/bin/echo $ip | sed 's/:::/::/')
            break # only one substitution
        fi
    done

    # remove prepending : if necessary
    /bin/echo $ip | /bin/grep -qs "^:[^:]" && ip=$(echo $ip | sed 's/://')

    /bin/echo $ip
}
### Expand IPv6
expand_ipv6() {
    ip=$1

    # prepend 0 if we start with :
    /bin/echo $ip | /bin/grep -qs "^:" && ip="0${ip}"

    # expand ::
    if /bin/echo $ip | /bin/grep -qs "::"; then
        colons=$(/bin/echo $ip | sed 's/[^:]//g')
        missing=$(/bin/echo ":::::::::" | sed "s/$colons//")
        expanded=$(/bin/echo $missing | sed 's/:/:0/g')
        ip=$(/bin/echo $ip | sed "s/::/$expanded/")
    fi

    blocks=$(/bin/echo $ip | /bin/grep -o "[0-9a-f]\+")
    set $blocks

    printf "%04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x\n" \
        $(hex2dec $1) \
        $(hex2dec $2) \
        $(hex2dec $3) \
        $(hex2dec $4) \
        $(hex2dec $5) \
        $(hex2dec $6) \
        $(hex2dec $7) \
        $(hex2dec $8)
}
### Reverse IPv6
rarpa_ipv6() {
  local idx s=${1//:}
  for (( idx=${#s} - 1; idx>=0; idx-- )); do
    printf '%s.' "${s:$idx:1}"
  done
  printf 'ip6.arpa\n'
}

IPv6New=$(compress_ipv6 ${IPv6})
IPv6Exp=$(expand_ipv6 ${IPv6})
IPv4ARPA=$(/bin/echo ${IPv4} | sed -r 's/^([0-9]{1,3}).([0-9]{1,3}).([0-9]{1,3}).([0-9]{1,3})$/\4.\3.\2.\1.in-addr.arpa/')
IPv6ARPA=$(rarpa_ipv6 ${IPv6Exp})

### IP validation
isIP4() {
local IP4="$1"
local VALIDregex="^([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})"
if [[ "${IP4}" =~ ${VALIDregex} ]]; then
isIP4="true"; else
isIP4="false"; fi
}
isIP4 ${IPv4}
isIP6() {
local IP6="$1"
local VALIDregex="(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))"
if [[ "${IP6}" =~ ${VALIDregex} ]]; then
isIP6="true"; else
isIP6="false"; fi
}
isIP6 ${IPv6Exp}

### IP for ssh config
if [ "${isIP4}" = "true" ]; then
  sshIP="${IPv4}"
elif [ "${isIP4}" = "true" ]; then
  sshIP="${IPv6Exp}"
fi

# We need this before we can use keyscan
/usr/bin/cat <<EOF > /opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb
VultrInstanceID="${VultrInstanceID}"
VerbHostID="IMPORTING"
VerbName="${namespace}"
VerbTLD="${VerbTLD}"
VerbRegion="${VultrRegion}"
VerbUser="${vuser}"
VerbPort="${Port}"
VerbNameServersConfig="${NameServersConfig}"
VerbIPv4="${IPv4}"
VerbIPv6="${IPv6New}"
VerbIPv6Exp="${IPv6Exp}"
VerbARPAIPv4="${IPv4ARPA}"
VerbARPAIPv6="${IPv6ARPA}"
EOF

# Create the .ssh/config entry
. /opt/rink/sshkey
/usr/bin/sed -i "/${namespace}.${VerbTLD}.ssh/d" /root/.ssh/config
/usr/bin/echo "Include /opt/rink/conf/verbers/${namespace}.${VerbTLD}.ssh" >> /root/.ssh/config
/usr/bin/cat <<EOF > /opt/rink/conf/verbers/${namespace}.${VerbTLD}.ssh
Host ${namespace}.${VerbTLD}
Hostname ${sshIP}
User root
Port ${Port}
IdentityFile /root/.ssh/${SSHKey}
EOF

# Wait for powerup
/usr/bin/echo "Checking if VPS can be accessed..."
/opt/rink/run/waitvpsanswer ${namespace} ${VerbTLD}
e="$?"; if [ "$e" != "0" ]; then
  /usr/bin/echo "VPS cannot be accessed. It is possible that the keys are not installed. Make sure that they key '${SSHKey}' is properly installed on this VPS, then try again."
  /usr/bin/rm -f "${namespace}.${VerbTLD}.*"
  exit "$e"
fi

# Refresh the SSHD keys on the server (they are still original from the snapshot and will seem like a duplicate in /root/.ssh/known_hosts)
## Do this in a loop
/usr/bin/ssh -o StrictHostKeyChecking=no -o ConnectTimeout=3 -q ${namespace}.${VerbTLD} "/usr/bin/rm /etc/ssh/ssh_host_* && /usr/bin/ssh-keygen -A && /usr/bin/reboot"
sshresetstatus="$?"
count=0
while [ "$sshresetstatus" != "0" ]; do
  /usr/bin/echo "newvps ssh-keygen loop reboot error: $sshresetstatus
  Waiting, then trying again..."
  sleep 3
  /usr/bin/ssh -o StrictHostKeyChecking=no -o ConnectTimeout=3 -q ${namespace}.${VerbTLD} "/usr/bin/rm -f /etc/ssh/ssh_host_* && /usr/bin/ssh-keygen -A && /usr/bin/reboot"
  sshresetstatus="$?"
  # If we have been trying 10 minutes, restart
  if [ "$count" -gt "200" ]; then
    /opt/rink/run/powercycle ${namespace} ${VerbTLD}
    count=0
  fi
  ((count++))
done

#DEV: probably replace the final `&& reboot` with a vultr-cli ...restart instance (however that works)
#DEV: however, rebooting from the CLI is softer and prefferable
## Remove the known_hosts entry that SSH just added because its identity key has already changed and we'll use a hashed one via keyscan
/usr/bin/sed -i "/${IPv4}/d" /root/.ssh/known_hosts

# Add the hashed key
sleep 10 # The server needs to start its reboot
/opt/rink/run/waitvpson ${namespace} ${VerbTLD}
/opt/rink/run/waitvpsanswer ${namespace} ${VerbTLD}
/opt/rink/run/keyscan ${namespace} ${VerbTLD}

# Test the connection
/usr/bin/ssh ${namespace}.${VerbTLD} exit 0
if [ "$?" != "0" ]; then
  /usr/bin/echo "Can't connect to this verber based on credentials!
Re-read the instructions and consider checking the port"
  /usr/bin/rm -f /opt/rink/conf/verbers/${namespace}.${VerbTLD}.ssh /opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb
  /usr/bin/mv /opt/rink/conf/verbers/${namespace}.${VerbTLD}.raw /opt/rink/conf/verbers.destroyed/failedimport.${namespace}.${VerbTLD}.conf
  /usr/bin/sed -i "/${namespace}.${VerbTLD}.ssh/d" /root/.ssh/config
  exit 8
fi

# Check for import permission
/usr/bin/ssh ${namespace}.${VerbTLD} /usr/bin/ls /opt/verb/conf/.importme > /dev/null 2>&1
if [ "$?" != "0" ]; then
  /usr/bin/echo "Server does not grant permission to be imported; read the instructions"
  /usr/bin/rm -f /opt/rink/conf/verbers/${namespace}.${VerbTLD}.ssh /opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb
  /usr/bin/mv /opt/rink/conf/verbers/${namespace}.${VerbTLD}.raw /opt/rink/conf/verbers.destroyed/failedimport.${namespace}.${VerbTLD}.conf
  /usr/bin/sed -i "/${namespace}.${VerbTLD}.ssh/d" /root/.ssh/config
  exit 9
fi
# Get the host
/usr/bin/ssh ${namespace}.${VerbTLD} /usr/bin/cat /opt/verb/conf/servernameip > /opt/rink/tmp/servernameip.${namespace}.${VerbTLD}
if [ "$?" != "0" ] || [ ! -f "/opt/rink/tmp/servernameip.${namespace}.${VerbTLD}" ]; then
  /usr/bin/echo "Server does not have proper settings, cannot proceed!"
  /usr/bin/rm -f /opt/rink/conf/verbers/${namespace}.${VerbTLD}.ssh /opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb
  /usr/bin/mv /opt/rink/conf/verbers/${namespace}.${VerbTLD}.raw /opt/rink/conf/verbers.destroyed/failedimport.${namespace}.${VerbTLD}.conf
  /usr/bin/sed -i "/${namespace}.${VerbTLD}.ssh/d" /root/.ssh/config
  exit 9
fi
. /opt/rink/tmp/servernameip.${namespace}.${VerbTLD}
## Validate
if [ -z "${ServerHost}" ] || [ "${ServerName}" != "${namespace}" ] || [ "${ServerTLD}" != "${VerbTLD}" ]; then
  /usr/bin/echo "Imported verber not properly configured, cannot proceed!"
  /usr/bin/rm -f /opt/rink/conf/verbers/${namespace}.${VerbTLD}.ssh /opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb
  /usr/bin/mv /opt/rink/conf/verbers/${namespace}.${VerbTLD}.raw /opt/rink/conf/verbers.destroyed/failedimport.${namespace}.${VerbTLD}.conf
  /usr/bin/sed -i "/${namespace}.${VerbTLD}.ssh/d" /root/.ssh/config
  exit 8
else
  HostID="$ServerHost"
fi
## Set the host
/usr/bin/sed -i "s/VerbHostID=.*/VerbHostID=\"${HostID}\"/" /opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb
/usr/bin/rm -f /opt/rink/tmp/servernameip.${namespace}.${VerbTLD}

# Validate IP addresses
if [ "${ServerExpIPv6}" != "${IPv6Exp}" ] && [ "${ServerExpIPv6}" != "NOIP6" ]; then
  /usr/bin/echo "IPv6 addresses for imported verber do not agree, cannot proceed!
Server reports: ${IPv6Exp}
Verber records: ${ServerExpIPv6}"
  /usr/bin/rm -f /opt/rink/conf/verbers/${namespace}.${VerbTLD}.ssh /opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb
  /usr/bin/mv /opt/rink/conf/verbers/${namespace}.${VerbTLD}.raw /opt/rink/conf/verbers.destroyed/failedimport.${namespace}.${VerbTLD}.conf
  /usr/bin/sed -i "/${namespace}.${VerbTLD}.ssh/d" /root/.ssh/config
  exit 8
fi
if [ "${ServerIPv4}" != "${IPv4}" ] && [ "${ServerIPv4}" != "NOIP4" ]; then
  /usr/bin/echo "IPv4 addresses for imported verber do not agree, cannot proceed!
Server reports: ${IPv4}
Verber records: ${ServerIPv4}"
  /usr/bin/rm -f /opt/rink/conf/verbers/${namespace}.${VerbTLD}.ssh /opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb
  /usr/bin/mv /opt/rink/conf/verbers/${namespace}.${VerbTLD}.raw /opt/rink/conf/verbers.destroyed/failedimport.${namespace}.${VerbTLD}.conf
  /usr/bin/sed -i "/${namespace}.${VerbTLD}.ssh/d" /root/.ssh/config
  exit 8
fi

# IP addresses
/usr/bin/echo "IPv4: $IPv4"
/usr/bin/echo "IPv6: $IPv6"
/usr/bin/echo "Region: $VultrRegion"

# Check for existing sns user
/usr/bin/ssh -q -o StrictHostKeyChecking=yes ${NS1Name}.${RinkVerbTLD} [[ -d "/srv/sns/${namespace}-${VerbTLD}" ]] && ns1already="true"
/usr/bin/ssh -q -o StrictHostKeyChecking=yes ${NS2Name}.${RinkVerbTLD} [[ -d "/srv/sns/${namespace}-${VerbTLD}" ]] && ns2already="true"
if [ "${ns1already}" = "true" ] && [ "${ns2already}" = "true" ]; then
  /usr/bin/echo "SNS user already exists on nameserver ${NS1Host} & ${NS2Host}. Fix that first."
  /usr/bin/rm -f /opt/rink/conf/verbers/${namespace}.${VerbTLD}.ssh /opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb
  /usr/bin/mv /opt/rink/conf/verbers/${namespace}.${VerbTLD}.raw /opt/rink/conf/verbers.destroyed/failedimport.${namespace}.${VerbTLD}.conf
  /usr/bin/sed -i "/${namespace}.${VerbTLD}.ssh/d" /root/.ssh/config
  exit 7
elif [ "${ns1already}" = "true" ]; then
  /usr/bin/echo "SNS user already exists on nameserver ${NS1Host}. Fix that first."
  /usr/bin/rm -f /opt/rink/conf/verbers/${namespace}.${VerbTLD}.ssh /opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb
  /usr/bin/mv /opt/rink/conf/verbers/${namespace}.${VerbTLD}.raw /opt/rink/conf/verbers.destroyed/failedimport.${namespace}.${VerbTLD}.conf
  /usr/bin/sed -i "/${namespace}.${VerbTLD}.ssh/d" /root/.ssh/config
  exit 7
elif [ "${ns2already}" = "true" ]; then
  /usr/bin/echo "SNS user already exists on nameserver ${NS2Host}. Fix that first."
  /usr/bin/rm -f /opt/rink/conf/verbers/${namespace}.${VerbTLD}.ssh /opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb
  /usr/bin/mv /opt/rink/conf/verbers/${namespace}.${VerbTLD}.raw /opt/rink/conf/verbers.destroyed/failedimport.${namespace}.${VerbTLD}.conf
  /usr/bin/sed -i "/${namespace}.${VerbTLD}.ssh/d" /root/.ssh/config
  exit 7
fi

# Update the NS information on the imported verber
/usr/bin/ssh ${namespace}.${VerbTLD} "/opt/verb/serfs/updateverber"
/usr/bin/cat /opt/rink/inkdnsnameservers | /usr/bin/ssh ${namespace}.${VerbTLD} "/usr/bin/cat > /opt/verb/conf/inklists/inkdnsnameservers"
/usr/bin/ssh ${namespace}.${VerbTLD} /usr/bin/echo 'CustomNS="true"' >> /opt/verb/conf/inklists/inkdnsnameservers
/usr/bin/ssh ${namespace}.${VerbTLD} "/opt/verb/serfs/inkdnssetns1"
/usr/bin/ssh ${namespace}.${VerbTLD} "/opt/verb/serfs/inkdnssetns2"
/usr/bin/ssh ${namespace}.${VerbTLD} "/opt/verb/serfs/inkdnsrefreshbind"

# Rink user setup
## Make this Verber look like it is pre-setup
/usr/bin/ssh ${namespace}.${VerbTLD} "/usr/bin/cp -f /opt/verb/conf/servertldstatus /opt/verb/conf/servertldstatus286"
/usr/bin/ssh ${namespace}.${VerbTLD} "/usr/bin/cp -f /opt/verb/conf/servernameip /opt/verb/conf/servernameip286"
## Create the actual rink keys and users
/opt/rink/run/newverbrinkkeys ${namespace} ${VerbTLD} ${vuser}
## Restore this Verber for post-setop (using a safe workflow)
/usr/bin/ssh ${namespace}.${VerbTLD} "/usr/bin/rm -f /opt/verb/conf/servernameip && /usr/bin/mv /opt/verb/conf/servernameip286 /opt/verb/conf/servernameip"
/usr/bin/ssh ${namespace}.${VerbTLD} "/usr/bin/rm -f /opt/verb/conf/servertldstatus && /usr/bin/mv /opt/verb/conf/servertldstatus286 /opt/verb/conf/servertldstatus"

# Setup note
/usr/bin/echo 'SetupVerber="DONE"' >> /opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb

# Tell the Verber to import itself to the nameservers
/usr/bin/ssh ${namespace}.${VerbTLD} "/opt/verb/serfs/rinkimportme"
if [ "$?" != "0" ]; then
  /usr/bin/echo "Server could not be imported by nameservers, something is very wrong"
  /usr/bin/rm -f /opt/rink/conf/verbers/${namespace}.${VerbTLD}.ssh /opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb
  /usr/bin/mv /opt/rink/conf/verbers/${namespace}.${VerbTLD}.raw /opt/rink/conf/verbers.destroyed/failedimport.${namespace}.${VerbTLD}.conf
  /usr/bin/sed -i "/${namespace}.${VerbTLD}.ssh/d" /root/.ssh/config
  exit 6
else
  /usr/bin/echo 'RinkVerbsNSListed="DONE"' >> /opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb
fi

# Verber info
/usr/bin/echo "# servernameip" > /opt/rink/conf/verbers/svr.${namespace}.${VerbTLD}.conf
/usr/bin/ssh ${namespace}.${VerbTLD} "/usr/bin/cat /opt/verb/conf/servernameip" >> /opt/rink/conf/verbers/svr.${namespace}.${VerbTLD}.conf
/usr/bin/echo "# siteurlist" >> /opt/rink/conf/verbers/svr.${namespace}.${VerbTLD}.conf
/usr/bin/ssh ${namespace}.${VerbTLD} "/usr/bin/cat /opt/verb/conf/siteurilist" >> /opt/rink/conf/verbers/svr.${namespace}.${VerbTLD}.conf

# PTR records with the hosting service
. /opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb
. /opt/rink/conf/verbers/svr.${namespace}.${VerbTLD}.conf
/usr/bin/vultr-cli instance reverse-dns set-ipv4 "${VultrInstanceID}" -e "${hostURI}" -i "${ServerIPv4}"
/usr/bin/vultr-cli instance reverse-dns set-ipv6 "${VultrInstanceID}" -e "${hostURI}" -i "${ServerIPv6}"

# Remove the import permission
/usr/bin/ssh ${namespace}.${VerbTLD} "/usr/bin/rm -f /opt/verb/conf/.importme"

# Finish
/usr/bin/echo "${namespace}.${VerbTLD} imported. It's identity key has changed, so you will need to remove lines with those IP addresses from any .ssh/known_hosts files on machines previously used to access it."
