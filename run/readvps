#!/bin/bash
#inkVerbRunner! verb.ink

# This reads info from an existing Vultr VPS, sending the output to a config file that can be read, creating other configs based on output
## Tertiary Warning: This is run by other scripts and should not be run by itself
## Used by: addmodvps

# How to use:
## ./readvps [namespace] [tld] [vultr instance ID] [user]

# Eg:
## ./readvps name ink bla3-bla2-bla1 john
## ./readvps nameothername red bla0-bla0-bl4a john



if [ -z "$4" ]; then
  /usr/bin/echo "Needs namespace, TLD, Vultr instance ID, & user arguments, I quit."
  exit 0
fi

# Defaults
. /opt/rink/rinknames
. /opt/rink/ns/${NameServersConfig}

namespace="$1"
VerbTLD="$2"
VultrInstanceID="$3"
vuser="$4"

# Check to see if this verber already exists by this name
if [ -f /opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb ]; then
  echo "Verber with name '${VerbTLD}' and TLD '${namespace}' already exists."
  exit 0
elif [ "${VerbTLD}" != "${RinkVerbTLD}" ] && [ ! -f "/opt/rink/conf/verbers/${namespace}.${RinkVerbTLD}.vrb" ]; then
  echo "Verber with '${RinkVerbTLD}' TLD must be created for '${namespace}' before creating non-'${RinkVerbTLD}' TLD verbers."
  exit 0
elif [ "${VerbTLD}" != "${RinkVerbTLD}" ] && [ -f "/opt/rink/conf/verbers/${namespace}.${RinkVerbTLD}.vrb" ]; then
  . /opt/rink/conf/verbers/${namespace}.${RinkVerbTLD}.vrb
  . /opt/rink/ns/${VerbNameServersConfig}
  if [ "${VerbUser}" != "${vuser}" ]; then
    echo "Verb name '${namespace}' is already owned by another user."
    exit 0
  fi
fi

# Get $Port
. /opt/rink/portnum

# Verify that it works
/usr/bin/vultr-cli instance ipv4 list $VultrInstanceID
e="$?"; [[ "$e" = "0" ]] || exit "$e"

# Get the IP addresses
FIRSTIPv4PLACEHOLDER="$(/usr/bin/vultr-cli instance ipv4 list $VultrInstanceID | /usr/bin/grep main_ip | /usr/bin/sed 's/\s.*$//')"
FIRSTIPv6PLACEHOLDER="$(/usr/bin/vultr-cli instance ipv6 list $VultrInstanceID | /usr/bin/grep main_ip | /usr/bin/sed 's/\s.*$//')"
/usr/bin/echo "IPv4: $IPv4"
/usr/bin/echo "IPv6: $IPv6"

# Get the VPS instance ID
/usr/bin/cat <<EOF > /opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb
VultrInstanceID="$VultrInstanceID"
VerbHostID="NONE_MOD_ADD"
VerbName="$namespace"
VerbTLD="$VerbTLD"
VerbRegion="NONE_MOD_ADD"
VerbUser="$vuser"
VerbPort="$Port"
VerbNameServersConfig="${NameServersConfig}"
EOF

## IP processing
### Compress IPv6
hex2dec(){
    [ "$1" != "" ] && printf "%d" "$(( 0x$1 ))"
}
compress_ipv6() {
    ip=$1

    blocks=$(/bin/echo $ip | /bin/grep -o "[0-9a-f]\+")
    set $blocks

    # compress leading zeros
    ip=$(printf "%x:%x:%x:%x:%x:%x:%x:%x\n" \
        $(hex2dec $1) \
        $(hex2dec $2) \
        $(hex2dec $3) \
        $(hex2dec $4) \
        $(hex2dec $5) \
        $(hex2dec $6) \
        $(hex2dec $7) \
        $(hex2dec $8)
    )

    # prepend : for easier matching
    ip=:$ip

    # :: must compress the longest chain
    for pattern in :0:0:0:0:0:0:0:0 \
            :0:0:0:0:0:0:0 \
            :0:0:0:0:0:0 \
            :0:0:0:0:0 \
            :0:0:0:0 \
            :0:0; do
        if /bin/echo $ip | /bin/grep -qs $pattern; then
            ip=$(/bin/echo $ip | sed "s/$pattern/::/")
            # if the substitution occured before the end, we have :::
            ip=$(/bin/echo $ip | sed 's/:::/::/')
            break # only one substitution
        fi
    done

    # remove prepending : if necessary
    /bin/echo $ip | /bin/grep -qs "^:[^:]" && ip=$(echo $ip | sed 's/://')

    /bin/echo $ip
}
### Expand IPv6
expand_ipv6() {
    ip=$1

    # prepend 0 if we start with :
    /bin/echo $ip | /bin/grep -qs "^:" && ip="0${ip}"

    # expand ::
    if /bin/echo $ip | /bin/grep -qs "::"; then
        colons=$(/bin/echo $ip | sed 's/[^:]//g')
        missing=$(/bin/echo ":::::::::" | sed "s/$colons//")
        expanded=$(/bin/echo $missing | sed 's/:/:0/g')
        ip=$(/bin/echo $ip | sed "s/::/$expanded/")
    fi

    blocks=$(/bin/echo $ip | /bin/grep -o "[0-9a-f]\+")
    set $blocks

    printf "%04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x\n" \
        $(hex2dec $1) \
        $(hex2dec $2) \
        $(hex2dec $3) \
        $(hex2dec $4) \
        $(hex2dec $5) \
        $(hex2dec $6) \
        $(hex2dec $7) \
        $(hex2dec $8)
}
### Reverse IPv6
rarpa_ipv6() {
  local idx s=${1//:}
  for (( idx=${#s} - 1; idx>=0; idx-- )); do
    printf '%s.' "${s:$idx:1}"
  done
  printf 'ip6.arpa\n'
}

IPv6New=$(compress_ipv6 ${IPv6})
IPv6Exp=$(expand_ipv6 ${IPv6})
IPv4ARPA=$(/bin/echo ${IPv4} | sed -r 's/^([0-9]{1,3}).([0-9]{1,3}).([0-9]{1,3}).([0-9]{1,3})$/\4.\3.\2.\1.in-addr.arpa/')
IPv6ARPA=$(rarpa_ipv6 ${IPv6Exp})

## Append IP addresses to config
/usr/bin/cat <<EOF >> /opt/rink/conf/verbers/${namespace}.${VerbTLD}.vrb
VerbIPv4="${IPv4}"
VerbIPv6="${IPv6New}"
VerbIPv6Exp="${IPv6Exp}"
VerbARPAIPv4="${IPv4ARPA}"
VerbARPAIPv6="${IPv6ARPA}"
EOF

# Create the .ssh/config entry
. /opt/rink/sshkey
/usr/bin/echo "Include /opt/rink/conf/verbers/${namespace}.${VerbTLD}.ssh" >> /root/.ssh/config
/usr/bin/cat <<EOF > /opt/rink/conf/verbers/${namespace}.${VerbTLD}.ssh
Host ${namespace}.${VerbTLD}
Hostname ${IPv4}
User root
Port ${Port}
IdentityFile /root/.ssh/${SSHKey}
EOF

# Keyscan
/opt/rink/run/keyscan ${namespace} ${VerbTLD}
e="$?"; [[ "$e" = "0" ]] || exit "$e"

# Check for an answer
/opt/rink/run/waitvpsanswer ${namespace} ${VerbTLD}

# Finish
/usr/bin/echo "${namespace}.${VerbTLD} mod added. It should be ready now."
