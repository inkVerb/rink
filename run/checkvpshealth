#!/bin/bash
#inkVerbRunner! verb.ink

# This simply checks the health of a VPS to see if all settings and variables are in place as they should be
## This is useful after running addvps for verber creation
## If healthy, this will exit 0 as true
## If not healthy, this will exit 6 as false (impossible error)


# How to use:
## ./checkvpshealth [verb-namespace] [tld] [user]

# Eg:
## ./checkvpshealth name ink john


if [ -z "$3" ]; then
  /usr/bin/echo "Needs namespace, TLD, user plan, region, & snapshot arguments, I quit."
  exit 0
fi

# Defaults
. /opt/rink/rinknames

namespace="$1"
checkVerbTLD="$2"
vuser="$3"

# Check the existence of the verber
if [ ! -f "/opt/rink/conf/${namespace}.${checkVerbTLD}.raw" ]; then
  /usr/bin/echo "No raw conf file exists. Verber does not exist."
  exit 0
fi

# Get the instance ID
if [ -f "/opt/rink/conf/${namespace}.${checkVerbTLD}.vrb" ]; then
  /usr/bin/echo ".vrb file found..."
  . /opt/rink/conf/${namespace}.${checkVerbTLD}.vrb
  . /opt/rink/ns/${VerbNameServersConfig}
  ## we can now use ${VultrInstanceID}
  RawVultrInstanceID="$(/usr/bin/cat /opt/rink/conf/${namespace}.${checkVerbTLD}.raw | /usr/bin/grep ^ID | /usr/bin/sed s"/ID\t\t\t//")"
  if [ "${RawVultrInstanceID}" != "${VultrInstanceID}" ]; then
    /usr/bin/echo ".raw and .vrb conf files conflict."
    unhealthy="true"
else
  /usr/bin/echo "No .vrb file."
  unhealthy="true"
fi

# Check conf credentials
isIP4() {
local ip4="$1"
local vvar="$2"
local validregex="^([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})"
if [[ "${ip4}" =~ ${validregex} ]]; then
isIP4="true"; else
isIP4="false"; fi
}
## IP6
### Expanded or compressed IPv6 formats both work
isIP6() {
local ip6="$1"
local vvar="$2"
local validregex="(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))"
if [[ "${ip6}" =~ ${validregex} ]]; then
isIP6="true"; else
isIP6="false"; fi
}
### Reverse IPv6
rarpa_ipv6() {
  local idx s=${1//:}
  for (( idx=${#s} - 1; idx>=0; idx-- )); do
    printf '%s.' "${s:$idx:1}"
  done
  printf 'ip6.arpa\n'
}

# Conf file and settings
/usr/bin/echo "Config settings"
if [ -z "${VultrInstanceID}" ]; then
  /usr/bin/echo "VultrInstanceID missing from conf."
  unhealthy="true"
fi
if [ -z "${VultrPlan}" ]; then
  /usr/bin/echo "VultrPlan missing from conf."
  unhealthy="true"
  if ! /usr/bin/vultr-cli plans list | /usr/bin/grep -q "^${VultrPlan}"; then
    /usr/bin/echo "Region invalid."
    unhealthy="true"
  fi
fi
if [ -z "${DateCreated}" ]; then
  /usr/bin/echo "DateCreated missing from conf."
  unhealthy="true"
fi
if [ -z "${VerbHostID}" ]; then
  /usr/bin/echo "VerbHostID missing from conf."
  unhealthy="true"
else
  isIP4 ${VerbIPv4}
  isIP6 ${VerbIPv6}
  if [ "${isIP4}" = "true" ]; then
    /usr/bin/echo "Checking host with IPv4"
    checkHost="$(/usr/bin/ssh -T -o StrictHostKeyChecking=yes root@${VerbIPv4} -p ${VerbPort} hostname)"
  elif [ "${isIP6}" = "true" ]; then
    /usr/bin/echo "Checking host with IPv6"
    checkHost="$(/usr/bin/ssh -T -o StrictHostKeyChecking=yes root@${VerbIPv6} -p ${VerbPort} hostname)"
  else
    /usr/bin/echo "No valid IP to access Verber."
    unhealthy="true"
  fi
  if [ "${checkHost}" != "${VerbHostID}.${namespace}.verb.${checkVerbTLD}" ]; then
    . /opt/rink/inkdnsnameservers
    if [ "${checkHost}" = "${DefaultNS1}" ] && [ "${NameserverNS1IPv4}" = "${VerbIPv4}" ] && ( [ "${NameserverNS1IPv6}" = "${VerbIPv6}" ] || [ "${NameserverNS1IPv6}" = "${VerbIPv6Exp}" ] ); then
      /usr/bin/echo "Nameserver: ${checkHost}"
    elif [ "${checkHost}" = "${DefaultNS2}" ] && [ "${NameserverNS2IPv4}" = "${VerbIPv4}" ] && ( [ "${NameserverNS2IPv6}" = "${VerbIPv6}" ] || [ "${NameserverNS2IPv6}" = "${VerbIPv6Exp}" ] ); then
      /usr/bin/echo "Nameserver: ${checkHost}"
    else
      /usr/bin/echo "Host does not check out."
      unhealthy="true"
    fi
  fi
fi
if [ -z "${VerbName}" ]; then
  /usr/bin/echo "VerbName missing from conf."
  unhealthy="true"
else
  if [ "${VerbName}" != "${namespace}" ]; then
    /usr/bin/echo "User doesn't match."
    unhealthy="true"
  fi
fi
if [ -z "${VerbTLD}" ]; then
  /usr/bin/echo "VerbTLD missing from conf."
  unhealthy="true"
else
  if [ "${VerbTLD}" != "${checkVerbTLD}" ]; then
    /usr/bin/echo "User doesn't match."
    unhealthy="true"
  fi
fi
if [ -z "${VerbRegion}" ]; then
  /usr/bin/echo "VerbRegion missing from conf."
  unhealthy="true"
else
  if ! /usr/bin/vultr-cli regions list | /usr/bin/grep -q "^${VerbRegion}"; then
    /usr/bin/echo "Region invalid."
    unhealthy="true"
  fi
fi
if [ -z "${VerbUser}" ]; then
  /usr/bin/echo "VerbUser missing from conf."
  unhealthy="true"
else
  if [ "${VerbUser}" != "${vuser}" ]; then
    /usr/bin/echo "User doesn't match."
    unhealthy="true"
  fi
fi
if [ -z "${VerbPort}" ]; then
  /usr/bin/echo "VerbPort missing from conf."
  unhealthy="true"
fi
if [ -z "${VerbNameServersConfig}" ]; then
  /usr/bin/echo "VerbNameServersConfig missing from conf."
  unhealthy="true"
else
  if [ ! -f "/opt/rink/ns/${VerbNameServersConfig}"  ]; then
    /usr/bin/echo "Nameserver conf can't be found."
    unhealthy="true"
  fi
fi
if [ -z "${VerbIPv4}" ]; then
  /usr/bin/echo "VerbIPv4 missing from conf."
  unhealthy="true"
else
  isIP4 ${VerbIPv4}
  if [ "${isIP4}" != "true" ]; then
    /usr/bin/echo "IPv4 invalid."
    unhealthy="true"
  fi
fi
if [ -z "${VerbIPv6}" ]; then
  /usr/bin/echo "VerbIPv6 missing from conf."
  unhealthy="true"
else
  isIP6 ${VerbIPv6}
  if [ "${isIP6}" != "true" ]; then
    /usr/bin/echo "Short IPv6 invalid."
    unhealthy="true"
  fi
fi
if [ -z "${VerbIPv6Exp}" ]; then
  /usr/bin/echo "VerbIPv6Exp missing from conf."
  unhealthy="true"
else
  isIP6 ${VerbIPv6Exp}
  if [ "${isIP6}" != "true" ]; then
    /usr/bin/echo "Expanded IPv6 invalid."
    unhealthy="true"
  fi
fi
if [ -z "${VerbARPAIPv4}" ]; then
  /usr/bin/echo "VerbARPAIPv4 missing from conf."
  unhealthy="true"
else
  IPv4ARPA=$(/usr/bin/echo ${VerbIPv4} | /usr/bin/sed -r 's/^([0-9]{1,3}).([0-9]{1,3}).([0-9]{1,3}).([0-9]{1,3})$/\4.\3.\2.\1.in-addr.arpa/')
  if [ "${VerbARPAIPv4}" != "${IPv4ARPA}" ]; then
    /usr/bin/echo "IPv4 ARPA doesn't match."
    unhealthy="true"
  fi
fi
if [ -z "${VerbARPAIPv6}" ]; then
  /usr/bin/echo "VerbARPAIPv6 missing from conf."
  unhealthy="true"
else
  IPv6ARPA=$(rarpa_ipv6 ${VerbIPv6Exp})
  if [ "${VerbARPAIPv6}" != "${IPv6ARPA}" ]; then
    /usr/bin/echo "IPv6 ARPA doesn't match."
    unhealthy="true"
  fi
fi
if [ -z "${Keyscan}" ]; then
  /usr/bin/echo " missing from conf."
  unhealthy="true"
else
  if [ "${Keyscan}" != "DONE" ]; then
    /usr/bin/echo "Keyscan not done."
    unhealthy="true"
  else
    if ! /opt/rink/run/sshrun ${namespace} ${VerbTLD} ${vuser} "exit 0"; then
      /usr/bin/echo "Verber can't be accessed."
      unhealthy="true"
    fi
  fi
fi

# See if the instance is still there
if ! /usr/bin/vultr-cli instance get ${VultrInstanceID}; then
  /usr/bin/echo "Can't get information."
  unhealthy="true"
fi

# Check nameservers
/usr/bin/echo "Nameservers"
if ! /usr/bin/ssh ${NS1Name}.${RinkVerbTLD} "exit 0"; then
  /usr/bin/echo "Can't connect to ${NS1Host}."
  unhealthy="true"
fi
if ! /usr/bin/ssh ${NS2Name}.${RinkVerbTLD} "exit 0"; then
  /usr/bin/echo "Can't connect to ${NS2Host}."
  unhealthy="true"
fi
if ! /usr/bin/ssh ${NS1Name}.${RinkVerbTLD} "/usr/bin/ls /srv/sns/${namespace}-${VerbTLD}"; then
  /usr/bin/echo "Not listed on ${NS1Host}."
  unhealthy="true"
fi
if ! /usr/bin/ssh ${NS2Name}.${RinkVerbTLD} "/usr/bin/ls /srv/sns/${namespace}-${VerbTLD}"; then
  /usr/bin/echo "Not listed on ${NS2Host}."
  unhealthy="true"
fi



## Check ssh
/usr/bin/echo "SSH config"
if ! /usr/bin/grep -q "${IPv4}" /root/.ssh/known_hosts; then
  /usr/bin/echo "IPv4 not a known host."
  unhealthy="true"
fi
if ! /usr/bin/grep -q "${IPv6Cmp}" /root/.ssh/known_hosts && ! /usr/bin/grep -q "${IPv6Exp}" /root/.ssh/known_hosts; then
  /usr/bin/echo "IPv6 not a known host."
  unhealthy="true"

fi
if ! /usr/bin/grep -q "Include" /root/.ssh/config | /usr/bin/grep -q "${namespace}.${VerbTLD}.ssh"; then
  /usr/bin/echo "SSH config not listed."
  unhealthy="true"
fi

# Finish
if [ -n "${unhealthy}" ] && [ "${unhealthy}" = "true" ]; then
  /usr/bin/echo "Verber is not healthy!"
  exit 6
else
  echo "Verber is healthy."
  exit 0
fi
